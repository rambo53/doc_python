Pour filtrer des lignes sur un dataframe et garder uniquement celles nous intéressant, la méthode la plus rapide est la suivante :

technologies= {
    'Courses':["Spark","PySpark","Spark","Python","PySpark"],
    'Fee' :[22000,25000,23000,24000,26000],
    'Discount':[1500,1000,1200,800,1300],
    'Duration':['30days','50days','30days','35days','40days']
          }
df = pd.DataFrame(technologies)

df2 = df[df.Courses.values == "Spark"]

print(df2)



Pour query avec conditions multiples :

attr_scope_loc = df_attr[(df_attr['localizable']=="1") & (df_attr['scopable']=="1")]

///////////////////////////

Pour récupérer les lignes non présentes dans un autre dataframe, ici on veut avoir un dataframe contenant les lignes
dont le "code" n'est pas présent dans "lst_code_in_akeneo", pour ce faire on utilise le tilde, qui représente la négation en pandas : 

lst_code_in_akeneo = df_asset_in_akeneo["code"].tolist()
asset_not_in_akeneo = df_padd_asset[~ df_padd_asset.code.isin(lst_code_in_akeneo)]


Une variante pour récupérer les lignes dont les index n'existent pas dans un autre df :

# je commence par réindexer mes df à comparer
df_padd_reindex = df_padd.set_index(df_padd["combination_reference"], inplace=False, drop=False)
df_ekkia_reindex = df_ekkia.set_index(df_ekkia["reference"], inplace=False, drop=False)

df_ekkia_not_in_padd = df_ekkia_reindex[ ~df_ekkia_reindex.index.isin(df_padd_reindex.index) ]
